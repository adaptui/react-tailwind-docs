{
  "/": {
    "title": "index",
    "data": {
      "": "A React UI library built using low level headless\nRenderleskit components &\nTailwind."
    }
  },
  "/docs/getting-started": {
    "title": "getting-started",
    "data": {
      "": "Renderlesskit uses tailwind to provide better styling at one place, so you'll\nneed to setup a tailwind project using thier\ninstallation guide.",
      "installation#Installation": "\nnpm i @renderlesskit/react-tailwind\n\nyarn add @renderlesskit/react-tailwind\n",
      "tailwind-setup#Tailwind setup": "After setting up tailwind in your project, import our preset() function inside\nyour tailwind.config.js and use it.\nmodule.exports = preset({\n  presets: [require(\"@renderlesskit/react-tailwind/preset\")],\n  purge: [\n    // Make sure to add this purge to generate the component's default styling\n    \"node_modules/@renderlesskit/react-tailwind/**/*\",\n  ],\n});\n\nCheckout our integration guides for CRA & Next.js\n",
      "setting-up-provider#Setting up provider": "Renderlesskit needs a theme provider to pass down all the neccesary styling for\nthe components.Go to the root of your application and add this:\nimport * as React from \"react\";\n// 1. import `RenderlesskitProvider` component\nimport { RenderlesskitProvider } from \"@renderlesskit/react-tailwind\";\n\nfunction App() {\n  // 2. Use at the root of your app\n  return (\n    <RenderlesskitProvider>\n      <App />\n    </RenderlesskitProvider>\n  );\n}\n"
    }
  },
  "/docs/components/primitives/avatar": {
    "title": "avatar",
    "data": {
      "": "Avatar component is used to display user's profile picture or initials or\nicons along with badges.\n\n",
      "imports#Imports": "\nimport {\n  Avatar,\n  AvatarDefaultStatusIndicators,\n  AvatarIcon,\n  AvatarImage,\n  AvatarInitials,\n  useAvatarProps,\n  useAvatarState,\n  AvatarStatusIndicator,\n  AvatarWrapper,\n} from \"@renderlesskit/react-tailwind\";\n",
      "usage#Usage": "\n\n",
      "avatar-sizes#Avatar sizes": "Avatar has 7 sizes xs sm md lg xl 2xl 3xl\n\n",
      "avatar-styles#Avatar styles": "Avatar comes in two styles, rounded & squared\n\n",
      "avatar-fallbacks#Avatar fallbacks": "If there is an error loading the src of the avatar, there are 2 fallbacks:\nIf there's a name prop, we use it to generate the initials.\nIf there's no name prop, we use a default avatar.\n\nIf both name and src are not provided you can pass a icon prop to show any\ncontent, icon has the lowest priority thus if name or src is provided fallback\nwill be ignored.\n\n",
      "avatar-with-status-indicators#Avatar with status indicators": "You can show status icons at the right corner of the Avatar using status prop.\nEach avatar sizes has its own status indicators sizes.\n\n",
      "api-reference#API Reference": "\n\n"
    }
  },
  "/docs/components/primitives/avatar-group": {
    "title": "avatar-group",
    "data": {
      "": "AvatarGroup component is used to display a set of avatars closed together.\n\n",
      "imports#Imports": "\nimport {\n  AvatarGroup,\n  useAvatarGroupProps,\n  useAvatarGroupState,\n  AvatarGroupWrapper,\n} from \"@renderlesskit/react-tailwind\";\n",
      "usage#Usage": "\n\n",
      "avatargroup-sizes#AvatarGroup sizes": "AvatarGroup has all 7 avatar sizes xs sm md lg xl 2xl 3xl\n\n",
      "avatargroup-styles#AvatarGroup styles": "AvatarGroup also comes in two styles of avatara, rounded & squared\n\n\nAvatar Group doesn't come with any status indicators\n",
      "api-reference#API Reference": "\n\n"
    }
  },
  "/docs/components/primitives/icon": {
    "title": "icon",
    "data": {
      "": "Icon is the base svg primitive for creating accssible icons.\n\n",
      "imports#Imports": "\nimport { Icon, createIcon } from \"@renderlesskit/react-tailwind\";\n",
      "usage#Usage": "\n\nIf no children is provided Icon will render a fallback icon.\n\n",
      "createicon-utility#createIcon utility": "To create icons more easily we provide a createIcon utility which takes few\nprops and returns a React component;Basic usage:\n\n",
      "all-icons#All icons": "\n\n",
      "api-reference#API Reference": "",
      "icon#Icon": "\n\n",
      "createicon#createIcon": "\n\n\n\n"
    }
  },
  "/docs/components/primitives/badge": {
    "title": "badge",
    "data": {
      "": "Display an indicator that requires attention.\n\n",
      "imports#Imports": "\nimport { Badge } from \"@renderlesskit/react-tailwind\";\n",
      "usage#Usage": "\n\n",
      "badge-variants#Badge variants": "Badge has 4 variants solid subtle outline\n\n",
      "badge-sizes#Badge Sizes": "Badge comes with 3 sizes sm md lg\n\n",
      "badge-themes#Badge Themes": "Badge comes with 5 themes default primary secondary success danger\n\n\nYou can add extra variants, themeColor & sizes via the theme file. Checkout\ntheming guide.\n",
      "badge-prefix#Badge prefix": "You can pass prefix props to the badge to prepend any content inside of badge.\n\n",
      "api-reference#API Reference": "\n\n"
    }
  },
  "/docs/components/primitives/box": {
    "title": "box",
    "data": {
      "": "Box is the most abstract component on top of which all other Renderlesskit\ncomponents are built. It uses reakit's Role\ncomponent internally.\n\n",
      "imports#Imports": "\nimport { Box } from \"@renderlesskit/react-tailwind\";\n",
      "usage#Usage": "\n\n",
      "as-prop#As prop": "By using the as prop you can control which element should be rendered, if you\nare using typescript Box is fully typesafe too.You can either pass string elements or pass ReactNodes to the as prop.Follows all the Reakit composition rules\nReakit Composition Docs\n\n",
      "tailwind-css-example#Tailwind CSS example": "\n\n",
      "card-example#Card example": "\n\n",
      "api-reference#API Reference": "\n\n"
    }
  },
  "/docs/components/primitives/button-group": {
    "title": "button-group",
    "data": {
      "": "The ButtonGroup component can be used to group collection of buttons of same\ntype to perform the a set of actions.\n\n",
      "imports#Imports": "\nimport { ButtonGroup } from \"@renderlesskit/react-tailwind\";\n\nButtonGroup: Used to group related buttons together in a horizontal stack,\ncan also be set as collapsed\n\n",
      "usage#Usage": "\n\n",
      "buttongroup-sizes#ButtonGroup sizes": "ButtonGruop also has 4 button sizes sm md lg xl\n\n",
      "buttongroup-variants#ButtonGroup variants": "ButtonGroup also has 4 button variants solid subtle outline ghost\n\n\nYou can add extra variants & sizes via the theme file. Checkout theming\nguide.\n",
      "button-prefix-suffix--icononly#Button prefix, suffix & iconOnly": "You can pass iconOnly, prefix and suffix props to the button to append or\nprepend any content inside of button.\n\n",
      "api-reference#API Reference": "\n\n"
    }
  },
  "/docs/components/primitives/button": {
    "title": "button",
    "data": {
      "": "The Button component can be used to trigger various kinds of user events such as\nsuch as submitting a form, opening a dialog, canceling an action, or performing\na delete operation.\n\n",
      "imports#Imports": "\nimport { Button, CloseButton } from \"@renderlesskit/react-tailwind\";\n\nButton: The button which has prefix/suffix icons support, variants & size.\nCloseButton: Button which has accesibility to perform the close action\n\n",
      "usage#Usage": "\n\n",
      "button-sizes#Button sizes": "Button has 4 sizes sm md lg xl\n\n",
      "button-variants#Button variants": "Button has 4 variants solid subtle outline ghost\n\n\nYou can add extra variants & sizes via the theme file. Checkout theming\nguide.\n",
      "button-prefix-suffix--icononly#Button prefix, suffix & iconOnly": "You can pass iconOnly, prefix and suffix props to the button to append or\nprepend any content inside of button.\n\n",
      "close-button#Close Button": "Component which comes with accessibility to close the dialogs or other actions\n\n",
      "api-reference#API Reference": "",
      "button#Button": "\n\n"
    }
  },
  "/docs/components/primitives/tag": {
    "title": "tag",
    "data": {
      "": "Tag is used when items need to be labelled, categorized, and organized using\nkeywords that describe them.\n\n",
      "imports#Imports": "\nimport { Tag } from \"@renderlesskit/react-tailwind\";\n\nTag Standalone tag component\n\n",
      "usage#Usage": "\n\n",
      "tag-sizes#Tag sizes": "Tag has 4 sizes sm md lg xl\n\n",
      "tag-variants#Tag variants": "Tag has 4 variants solid subtle outline ghost\n\n\nYou can add extra variants & sizes via the theme file. Checkout theming\nguide.\n",
      "closable-tag#Closable Tag": "Tags can be closable or removable. If closable prop is passed tag will show a\nclose icon in the suffix. You can override the default icon inside suffix.\nTag is by default renders a button component so you can pass the clickable props\ndirectly.\n\n",
      "tag-prefix--suffix#Tag Prefix & suffix": "Same as buttons Tag also accepts prefix, suffix props which can be used to\nappend or prepend content in the tag.\n\n\nSuffix will only be rendered if closable is set to true\n",
      "api-reference#API Reference": "\n\n"
    }
  },
  "/docs/components/primitives/divider": {
    "title": "divider",
    "data": {
      "": "Divider is a static structure that provides a visible boundary for elements.\nIt uses reakit's Separator component\ninternally.\n\n",
      "imports#Imports": "\nimport { Divider } from \"@renderlesskit/react-tailwind\";\n",
      "usage#Usage": "\n\n",
      "divider-direction#Divider direction": "Divider comes with two directions: horizontal and vertical.\n\n",
      "divider-label#Divider label": "Divider can have a label at the center to mark it as a section.\n\n",
      "api-reference#API Reference": "\n\n"
    }
  }
}
